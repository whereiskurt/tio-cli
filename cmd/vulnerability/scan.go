package vulnerability

import (
  "fmt"
  "strings"
  "os"
  "sort"
  "strconv"
  "tio-cli/api/tenable"
  "tio-cli/cmd/colour"
  "tio-cli/api/dao"
  "github.com/spf13/cobra"
  "github.com/spf13/viper"
  "github.com/olekukonko/tablewriter"
) 

var scanCLI ScanCLIParams
type ScanCLIParams struct {
  Short bool
  Detail bool
  IncludeHosts bool
  IncludeVulns bool
}

var ScanCmd = &cobra.Command{
	Aliases: []string{"scans"},
  Use:   "scan",
	Short: "Outputs scan listing",
	Long: `
 _  _  _ __  _
_> (_ (_|| |_>
----------------------------->
Output the details of scans.

#####################
EXAMPLES: 
  ##List all scans
  $ tio scans

`,
	Run: func(cmd *cobra.Command, args []string) {
    var portal = tenable.NewPortal()
    mainScan(portal)
  },
}

func init() { 

  ScanCmd.PersistentFlags().BoolVar(&scanCLI.Short, "list", true, "Only include most recent scans.")
  ScanCmd.PersistentFlags().BoolVar(&scanCLI.Detail, "detail", false, "Include host and vuln details with scan.")
  ScanCmd.PersistentFlags().BoolVar(&scanCLI.IncludeHosts, "includeHosts", false, "Include hosts details for each scan.")
  ScanCmd.PersistentFlags().BoolVar(&scanCLI.IncludeVulns, "includeVulns", false, "Include vuln details for each scan.")

  viper.BindPFlag("list", ScanCmd.PersistentFlags().Lookup("list"))
  viper.BindPFlag("detail", ScanCmd.PersistentFlags().Lookup("detail"))
  viper.BindPFlag("includeHosts", ScanCmd.PersistentFlags().Lookup("includeHosts"))
  viper.BindPFlag("includeVulns", ScanCmd.PersistentFlags().Lookup("includeVulns"))
  return
}

func mainScan(portal *tenable.Portal) {
  
  var scanIds []string = GetCLIScanIds(portal)

  var pluginIds [] string = GetCLIPluginIds()
  var collectKey = GetCLICollectKey()
  var depth = GetCLIDepth()

  var previous = viper.GetString("previous")
  var doShort = viper.GetBool("list")
  var doDetail = viper.GetBool("detail")
  var includeVulns = viper.GetBool("includeVulns")
  var includeHosts = viper.GetBool("includeHosts")
  
  var ignoreHistory = viper.GetString("ignoreHistory")
  var ignoreScans = viper.GetString("ignoreScans")
  
  var verbosityCmd string = viper.GetString("verbosity")
  var quiet bool = viper.GetBool("quiet")
  if quiet { verbosityCmd = "0" }
  var verbosity, _ = strconv.Atoi(verbosityCmd)


  if doShort == true {
    includeVulns = false
    includeHosts = false
  }
  if doDetail == true {
    doShort = false
    includeVulns = true
    includeHosts = true
  } 

  var trans = dao.NewTranslatorCollection(scanIds, depth, pluginIds, collectKey, portal, verbosity, ignoreScans)
  
  if verbosity > 0 {
    fmt.Println(colour.GREEN +"Beginning Input:"+colour.RESET)
  }
    
  out := make(chan dao.ScanDetailRecord)
  go trans.TranslateToScanDetailRows(out, includeHosts, includeVulns, previous, verbosity, ignoreHistory)

  var recs[] dao.ScanDetailRecord
  for record := range out {
    recs = append(recs, record)
  }

  sort.Slice(recs, func(i, j int) bool {
    var iv int64 = 0
    if len(recs[i].HistoryRecords) > 0 {
      val, iverr := strconv.ParseInt(string(recs[i].HistoryRecords[0].LastModifiedDate), 10, 64)
      if iverr == nil {
        iv = val
      }
    }
    var jv int64 = 0
    if len(recs[j].HistoryRecords) > 0 {
      val, jverr := strconv.ParseInt(string(recs[j].HistoryRecords[0].LastModifiedDate), 10, 64)
      if jverr == nil {
        jv = val
      }
    }

    if iv == jv {
      iv = 0
      jv = 0

      val1, iverr := strconv.ParseInt(recs[i].ScanId, 10, 64)
      if iverr == nil {
        iv = val1
      }

      val2, jverr := strconv.ParseInt(recs[j].ScanId, 10, 64)
      if jverr == nil {
        jv = val2
      }

      return iv < jv
    } else {
      return iv > jv
    }
  })

  if verbosity > 0 {
    fmt.Println(colour.GREEN +"Beginning Output:"+colour.RESET )
  }

  if doShort == true {
    fmt.Println(colour.GREEN +"Scans Summary:"+colour.RESET )
    drawShortTable(recs)
    fmt.Println(colour.GREEN +"Plugin Severity Counts:"+colour.RESET )
    drawDashboard(recs)
  } else {
    for i := range recs {

      fmt.Println(colour.GREEN +"Scan Overview:"+colour.RESET )
      drawShortTable(recs[i:i+1])
      fmt.Println()
      
      fmt.Println(colour.GREEN +"Run Schedule:"+colour.RESET )
      drawRunSchedule(recs[i])
      fmt.Println()

      fmt.Println(colour.GREEN +"Run History with Plugin Severity:"+colour.RESET )
      drawRunHistory(recs[i])
      fmt.Println()

      fmt.Println(colour.GREEN +"Plugins by Severity "+colour.CCRIT +"CRITICAL"+colour.GREEN +" and "+colour.CHIGH +"HIGH"+colour.GREEN +":"+colour.RESET )
      drawVulnTable(recs[i:i+1][0].HistoryRecords)
      fmt.Println()

      if len(recs[i].HistoryRecords) > 0 {
        fmt.Println(colour.GREEN +"Most Vulnerable Hosts with "+colour.CCRIT +"CRITICAL"+colour.GREEN +" and "+colour.CHIGH +"HIGH"+colour.GREEN +" severity:"+colour.RESET )
        drawHosts(recs[i].HistoryRecords[0])
        fmt.Println()        
      }
      fmt.Println(colour.GREEN +"Plugin Severity Counts:"+colour.RESET )
      drawDashboard(recs)
      fmt.Println(colour.BOLD +"***********************************************************************************"+colour.RESET )
      fmt.Println()
    }
  }

  return
}

func drawDashboard(recs[] dao.ScanDetailRecord) {
  table := tablewriter.NewWriter(os.Stdout)
  table.SetHeader([]string{"CRITICAL", "HIGH", "MEDIUM", "LOW","#HOSTS"})
  table.SetColumnAlignment([]int{tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER})

  data := [][]string{{}}
  val := []int64{0,0,0,0,0}
  for _,r := range recs {
    if len(r.HistoryRecords) > 0 {
      crit, _ := strconv.ParseInt(string(r.HistoryRecords[0].PluginCriticalCount), 10, 64)
      high, _ := strconv.ParseInt(string(r.HistoryRecords[0].PluginHighCount), 10, 64)
      medium, _ := strconv.ParseInt(string(r.HistoryRecords[0].PluginMediumCount), 10, 64)
      low, _ := strconv.ParseInt(string(r.HistoryRecords[0].PluginLowCount), 10, 64)
      hostcount, _ := strconv.ParseInt(string(r.HistoryRecords[0].HostCount), 10, 64)

      val[0] = val[0] + crit
      val[1] = val[1] + high
      val[2] = val[2] + medium
      val[3] = val[3] + low
      val[4] = val[4] + hostcount
    }
  }
  data = append(data, []string{colour.CCRIT +fmt.Sprintf("%v",val[0])+colour.RESET ,colour.CHIGH +fmt.Sprintf("%v",val[1])+colour.RESET ,colour.CMED  +fmt.Sprintf("%v",val[2])+colour.RESET ,fmt.Sprintf("%v",val[3]), colour.CCNT+fmt.Sprintf("%v",val[4])+colour.RESET })

  table.AppendBulk(data)
  table.Render()

  fmt.Printf(colour.BOLD +"Total Scans Counted: "+colour.RESET )
  fmt.Println(colour.CCNT+fmt.Sprintf("%v", len(recs))+colour.RESET )
  fmt.Println()
}

func drawHosts(r dao.ScanDetailHistoryRecord) {
  if len(r.Hosts) == 0 {
    return
  }

  table := tablewriter.NewWriter(os.Stdout)
  table.SetHeader([]string{"ID", "IP", "Names", "#CRIT/H/M/L", "OS"})
  table.SetColumnAlignment([]int{tablewriter.ALIGN_LEFT, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER})

  data := [][]string{}

  for _, h := range r.Hosts {
    //Only draw CRIT and HIGH hosts.
    if h.PluginHighCount != "0" || h.PluginCriticalCount != "0" {

      name := strings.Join([]string{h.HostFQDN, h.HostNetBIOS}, " ")
      if name == " " {
        name ="[UNKNOWN]"
      }
      if len(h.HostOperatingSystems) > 30 {
        h.HostOperatingSystems = h.HostOperatingSystems[:30]
      }
      os := h.HostOperatingSystems

      if  h.PluginCriticalCount != "0" {
         h.PluginCriticalCount = colour.CCRIT  +  h.PluginCriticalCount + colour.RESET 
      }
      if  h.PluginHighCount != "0" {
         h.PluginHighCount = colour.CHIGH  +  h.PluginHighCount + colour.RESET 
      }
      if  h.PluginMediumCount != "0" {
         h.PluginMediumCount = colour.CMED   +  h.PluginMediumCount + colour.RESET 
      }

      vulnStr := fmt.Sprintf("%v,%v,%v,%v", h.PluginCriticalCount,h.PluginHighCount,h.PluginMediumCount,h.PluginLowCount)
      if vulnStr == ",,," {
        vulnStr = "-"
      }
      data = append(data,[]string{h.HostId, h.HostIP, name, vulnStr, os})

    }
  }
  if len(data) > 0 {
    table.AppendBulk(data)
    table.Render()
  } else {
    fmt.Println(colour.BOLD +"---> NONE!"+colour.RESET )
  }
}

func drawRunSchedule(r dao.ScanDetailRecord) {

  table := tablewriter.NewWriter(os.Stdout)
  table.SetHeader([]string{"IP", "RunRule", "StartTime"})
  table.SetColumnAlignment([]int{tablewriter.ALIGN_CENTER, tablewriter.ALIGN_LEFT, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER})

  data := [][]string{{r.Enabled, r.RRules, r.StartTime}}
  table.AppendBulk(data)
  table.Render()
}

func drawRunHistory(r dao.ScanDetailRecord) {

  if len(r.HistoryRecords) == 0 {
    return
  }

  table := tablewriter.NewWriter(os.Stdout)
  table.SetHeader([]string{"HistoryID", "Status", "#Hosts", "#CRIT/H/M/L", "LastRun"})
  table.SetColumnAlignment([]int{tablewriter.ALIGN_CENTER, tablewriter.ALIGN_LEFT, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER})

  data := [][]string{}
  for _, h := range r.HistoryRecords {
    outRec := []string{h.HistoryId, h.Status}

    if  h.PluginCriticalCount != "0" {
       h.PluginCriticalCount = colour.CCRIT  +  h.PluginCriticalCount + colour.RESET 
    }
    if  h.PluginHighCount != "0" {
       h.PluginHighCount = colour.CHIGH  +  h.PluginHighCount + colour.RESET 
    }
    if  h.PluginMediumCount != "0" {
       h.PluginMediumCount = colour.CCNT   +  h.PluginMediumCount + colour.RESET 
    }

    vulnStr := fmt.Sprintf("%v,%v,%v,%v", h.PluginCriticalCount,h.PluginHighCount,h.PluginMediumCount,h.PluginLowCount)
    if vulnStr == ",,," {
      vulnStr = "0,0,0,0"
    }
    outRec = append(outRec, h.HostCount, vulnStr, UnixTimePretty(h.LastModifiedDate)[:10])

    data = append(data, outRec)
  }
  table.AppendBulk(data)
  table.Render()
}

func drawVulnTable(recs[] dao.ScanDetailHistoryRecord) {
  table := tablewriter.NewWriter(os.Stdout)
  table.SetHeader([]string{"ID", "Name", "Family,", "SEV", "#"})
  table.SetColumnAlignment([]int{tablewriter.ALIGN_RIGHT, tablewriter.ALIGN_LEFT, tablewriter.ALIGN_LEFT, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER})

  table.SetAutoWrapText(false)

  if len(recs) == 0 || len(recs[0].Plugins) == 0 {
    return
  }

  data := [][]string{}  
  for _, p := range recs[0].Plugins {
    sev, _ := strconv.ParseInt(p.Severity, 10, 64)
    if sev > 2 {
      var sevWord[] string = []string{"LOW",colour.CCNT  +"MED"+colour.RESET ,colour.CHIGH +"HIGH"+colour.RESET ,colour.CCRIT +"CRIT"+colour.RESET }
      if len(p.Name) > 45 {
        p.Name = p.Name[:45]
      }
      outRec := []string{p.PluginId,p.Name,p.Family,sevWord[sev-1] ,p.Count}
      data = append(data, outRec)
    }
  }
  if len(data) > 0 {
    table.AppendBulk(data)
    table.Render()
  } else {
    fmt.Println(colour.BOLD +"---> NONE!"+colour.RESET )
  }

}

func drawShortTable(recs[] dao.ScanDetailRecord) {
  table := tablewriter.NewWriter(os.Stdout)
  table.SetHeader([]string{"ID", "Name", "Status", "#Hosts", "#CRIT/H/M/L", "LastRun", "#Hists."})
  table.SetColumnAlignment([]int{tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER, tablewriter.ALIGN_CENTER})
  table.SetBorder(true)
  table.SetAutoWrapText(false)

  data := [][]string{}
  for _,record := range recs {
    outRec := []string{record.ScanId}

    //fmt.Printf(fmt.Sprintf("Record: %+v\n\n", record))
    status := strings.TrimSpace(record.Status)
    if status == "empty" {
      status = colour.CNEVER + "never" + colour.RESET 
    } else if status == "running" {
      status = colour.CRUNNING + "running" + colour.RESET 
    }

    if len(record.Name) > 40 {
      record.Name = record.Name[:40] + "..."
    }

    outRec = append(outRec, record.Name, status)

    if len(record.HistoryRecords) > 0 {
      lastRun := record.HistoryRecords[0]

      if  lastRun.PluginCriticalCount != "" && lastRun.PluginCriticalCount != "0"{
         lastRun.PluginCriticalCount = colour.CCRIT  +  lastRun.PluginCriticalCount + colour.RESET 
      }
      if  lastRun.PluginHighCount != "" &&   lastRun.PluginHighCount != "0" {
         lastRun.PluginHighCount = colour.CHIGH  +  lastRun.PluginHighCount + colour.RESET 
      }
      if  lastRun.PluginMediumCount != "" && lastRun.PluginMediumCount != "0"{
         lastRun.PluginMediumCount = colour.CMED   +  lastRun.PluginMediumCount + colour.RESET 
      }

      vulnStr := fmt.Sprintf("%s,%s,%s,%s", lastRun.PluginCriticalCount,lastRun.PluginHighCount,lastRun.PluginMediumCount,lastRun.PluginLowCount)
      if vulnStr == ",,," {
        vulnStr = "-"
      }
      outRec = append(outRec, lastRun.HostCount, vulnStr, UnixTimePretty(lastRun.LastModifiedDate)[:10])
    } else {
      outRec = append(outRec, "-", "-", "0")
    }
    outRec = append(outRec, record.TotalHistoryCount)

    data = append(data, outRec)
  }

  table.AppendBulk(data)

  table.Render()
}
