package vulnerability

import (
  "fmt"
  "log"
  "strconv"
  "strings"
  "github.com/spf13/cobra"
  "github.com/spf13/viper"
  "tio-cli/api/tenable"
  "tio-cli/api/dao"
)

var HistoryCmd = &cobra.Command{
  Use:   "history",
  Short: "Trend details for hosts (IP/FQDN) across scans history (depth).",
  Long: `

|_  o  _ _|_ _  __ o  _  _  | 
| | | _>  |_(_) |  | (_ (_| |  
----------------------------------------------------------------->
Outputs hosts that match the plugin (mandatory) over a depth op scands

#####################
EXAMPLES:

  ##Host plugin trends across all scans (including their last 4) matching plugin 
  $ tio history --plugin 100424 --depth 4
  
  ##Limit to hosts in scanids 1,2 including their 12 previous scans
  $ tio history --plugin 100424 --scanid 1,2 --depth 12
  
`,
  Run: func(cmd *cobra.Command, args []string) {
    var portal * tenable.Portal = tenable.NewPortal()

    mainHistory(portal)
  },
}

func mainHistory(portal *tenable.Portal) {
  var stillVulnerable, patched, unknown = 0, 0, 0

  var verbosityCmd string = viper.GetString("verbosity")
  var quiet bool = viper.GetBool("quiet")
  if quiet { verbosityCmd = "0" }
  var verbosity, _ = strconv.Atoi(verbosityCmd)
  var ignoreScans = viper.GetString("ignoreScans")


  var collectKey = "HostIP"
  if viper.GetBool("byHostFQDN") {
    collectKey = "HostFQDN"
  }

  var depth, err = strconv.Atoi( viper.GetString("depth") )
  if err != nil {
    log.Fatal("Invalid --depth parameter - likely not a number.")
  }

  var scanIds []string = GetCLIScanIds(portal)
  var pluginIds [] string = GetCLIPluginIds()

  if len(pluginIds) != 1 {
    log.Fatal("Invalid --plugins parameter.  Must specify exactly one plugin.")
  }
  var pluginId = pluginIds[0]
  

  tenable.PrettyPlugin(portal, pluginId)

  var trans = dao.NewTranslatorCollection(scanIds, depth, pluginIds, collectKey, portal, verbosity, ignoreScans)

  var out = make(chan dao.DaysVulnerableRecord)
  go trans.TranslateToDaysVulnerableRows(out) 

  fmt.Println(strings.Join(dao.DaysVulnerableRecordHeaderTitle,","))

  for record := range out {
    if record.IsVulnerable {
      stillVulnerable = stillVulnerable + 1
    } else if record.IsPatched {
      patched = patched + 1
    } else {
      unknown = unknown + 1 //Shouldn't ever happen.
    }

    fmt.Println(record.ToCSV(pluginId))
  }

  fmt.Printf("----------------------------------\n")
  fmt.Printf("Total Hosts Vulnerable: %d\n", stillVulnerable)
  fmt.Printf("Total Hosts Patched: %d\n", patched)
  fmt.Printf("(%d Hosts Unknown\n", unknown)
  fmt.Printf("----------------------------------\n")
  fmt.Println("")
    
  return
}

