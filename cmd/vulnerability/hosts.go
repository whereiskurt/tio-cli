package vulnerability

import (
  "fmt"
  "strings"
  "strconv"
  "tio-cli/api/dao"
  "tio-cli/api/tenable"
  "github.com/spf13/cobra"
  "github.com/spf13/viper"
)

var HostsCmd = &cobra.Command{
  Use:   "hosts",
  Short: "Output host details for a given scan.",
  Long: `
|_  _  _ _|_ _ 
| |(_)_>  |__> 
------------------------------------------------------------------->         
Outputs plugin count/severity for each host of a scan that matches

#####################
EXAMPLES:

  ##All hosts filtered by scans
  $ tio hosts --scan 1,2
      
  ##All hosts filtered by plugin
  $ tio hosts --plugins 100424,97833,88906 
  
  ##All hosts filtered by scan and plugin, from the most current scan
  $ tio hosts --scan 1,2 --plugins 100424 
  $ tio hosts --scan 1,2 --plugins 100424 --previous 0 

##################################
##PREVIOUS SCANS (i.e. history_id)
################################
To target results from a specific previous scans (offset 0):

  ##Show hosts from the PREVIOUS scans:
  $ tio hosts --scan 1,2 --plugins 97833 --previous 1 

  ##Show hosts from two scans back (historical):
  $ tio hosts --scan 1,2 --plugins 97833,100424 --previous 2
  
`,
  Run: func(cmd *cobra.Command, args []string) {
    var portal *tenable.Portal = tenable.NewPortal()
    mainHosts(portal)
  },
}

var hostCLI HostsCLIParams
type HostsCLIParams struct {
  CSV bool
}

func init() { 
  HostsCmd.PersistentFlags().BoolVar(&hostCLI.CSV, "csv", true, "-Output results as CSV")
  viper.BindPFlag("csv", HostsCmd.PersistentFlags().Lookup("csv"))
  return
}


func mainHosts(portal * tenable.Portal) {
  var includePlugins string = viper.GetString("plugins")
  var doCSV bool = viper.GetBool("csv")
  var previous, _ = strconv.Atoi( viper.GetString("previous") )

  var ignoreHistory string = viper.GetString("ignoreHistory")
  
  var verbosityCmd string = viper.GetString("verbosity")
  var quiet bool = viper.GetBool("quiet")
  if quiet { verbosityCmd = "0" }
  var verbosity, _ = strconv.Atoi(verbosityCmd)

  //Output the header row for the CSV
  fmt.Println(strings.Join(dao.ToCSVHostHeader(includePlugins, portal), ","))
    
  for _, scanId := range GetCLIScanIds(portal) {

    trans := dao.NewScanTranslator(scanId, previous, includePlugins, portal, verbosity, ignoreHistory)

    var out = make(chan dao.ScanHostPluginRecord)
    go trans.TranslateToScanHostRows(out)

    for record := range out {
      //FILTER: Not match and expected plugins to match, continue.
      if record.HostPluginsMatchCount == "0" && includePlugins != "" {
        continue
      }

      if doCSV {
        fmt.Println(record.ToCSV())
      }
      
    }
  }
  
  return
}