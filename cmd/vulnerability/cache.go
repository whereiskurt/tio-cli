package tio

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/whereiskurt/tio-cli/internal/app/tio/vulnerability"
)

var ShouldAnon bool = false
var CacheFolderRead string
var CacheFolderWrite string

//Cobra sub-command
var cacheCmd = &cobra.Command{
	Aliases: []string{"cache"},
	Use:     "cache",
	PreRun:  MainVulnCmd.PreRun,
	Run:     mainCache,
}

func init() {
	MainVulnCmd.AddCommand(cacheCmd)
	cacheCmd.SetHelpFunc(helpOutputCache)
	cacheCmd.SetUsageFunc(usageOutputCache)

	addBoolFlag("anonymize", &ShouldAnon, "Should we encrypt local cache copy? [default:true]", false)
	addBoolFlag("anon", &ShouldAnon, "Should we encrypt local cache copy? [default:true]", false)

	addStringFlag("cacheFolderRead", &CacheFolderRead, "Defaults to ./cache", "cache/")
	addStringFlag("cacheFolderWrite", &CacheFolderWrite, "Defaults to ./cache", "cache.obfu/")

}

func helpOutputCache(cmd *cobra.Command, args []string) {
	printCacheHelp()
	return
}
func usageOutputCache(cmd *cobra.Command) error {
	printCacheHelp()
	return nil
}

func printCacheHelp() {
	fmt.Println(fmt.Sprintf(`
CACHE
----------------------------->
ScanId: %s
Anonymize: %v
  `, VulnConfig.ScanId, ShouldAnon))
	return
}

func mainCache(cmd *cobra.Command, args []string) {

	c := vulnerability.NewCache(VulnConfig, ShouldAnon)

	c.Execute()
	return
}
