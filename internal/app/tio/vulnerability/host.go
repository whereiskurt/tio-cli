package vulnerability

import (
	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"strconv"
	"sync"
)

type Host struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewHost(config *tio.VulnerabilityConfig) (h *Host) {
	h = new(Host)
	h.Config = config

	h.Workers = new(sync.WaitGroup)
	h.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return h
}

func (h *Host) Execute() error {
	trans := dao.NewTranslator(h.Config)

	trans.Info("Executing vulnerability.scan.Execute()")

	var ch = make(chan dao.HostScanDetail)

	go trans.GoGetHostDetails(ch, 3)

	for record := range ch {
		record.HostPlugin = nil
		record.ScanDetail.Host = nil
		record.ScanDetail.HostPlugin = nil

		trans.Debugf("Host details for scan id:%+v", record)
	}

	trans.Debugf("Stats: tenable.portal:%+v", trans.PortalCache.Portal.Stats.GetCounts())
	trans.Debugf("Stats: tio.cache:%+v", trans.PortalCache.Stats.GetCounts())
	trans.Infof("Stats: dao.translator:%+v", trans.Stats.GetCounts())

	return nil
}
