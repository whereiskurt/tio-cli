package vulnerability

import (
	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
  "github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"

	"strconv"
	"sync"
)

type Host struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewHost(config *tio.VulnerabilityConfig) (h *Host) {
	h = new(Host)
	h.Config = config

	h.Workers = new(sync.WaitGroup)
	h.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return h
}

func (h *Host) Execute() error {
	trans := dao.NewTranslator(h.Config)
  cli := ui.NewCommandLineInterface(h.Config.Base)
	trans.Info("Executing vulnerability.scan.Execute()")

	//var ch = make(chan dao.HostScanDetailSummary)
  ch := make(chan dao.ScanHistory, 2)

	go trans.GoGetHostDetails(ch, 3)

  //seen := make(map[string]dao.ScanHistoryDetail)

	for rec := range ch {
    if len(rec.ScanHistoryDetails) > 0 {
      cli.DrawHosts(rec.ScanHistoryDetails[0])
    }
    //k := record.ScanDetail.Scan.ScanId + ":" + record.ScanDetail.HistoryId
    //seen[k] = record.ScanDetail
  }
  //for _, rec := range seen {
  //  cli.DrawHosts(rec)
  //}

	//trans.Debugf("Stats: tenable.portal:%+v", trans.PortalCache.Portal.Stats.GetCounts())
	//trans.Debugf("Stats: tio.cache:%+v", trans.PortalCache.Stats.GetCounts())
	//trans.Infof("Stats: dao.translator:%+v", trans.Stats.GetCounts())

	return nil
}
