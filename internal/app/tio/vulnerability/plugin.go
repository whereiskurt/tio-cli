package vulnerability

// current := &r.ScanHistoryDetails[0]

// keys := trans.SortScanPluginKeys(current)

// cli.Println(fmp.Sprintf(ui.GREEN+"Vulnerabilities for '%v' ScanId: %v, HistoryID: %s"+ui.RESET, currenp.Scan.Name, currenp.Scan.ScanId, currenp.HistoryId))
// cli.DrawScanVulnTable(*current, keys[:50])
// cli.Println("")


import (
	// "errors"
	// "fmt"
	"strconv"
	"sync"

	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Plugin struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewPlugin(config *tio.VulnerabilityConfig) *Plugin {
	s := new(Plugin)
	s.Config = config

	s.Workers = new(sync.WaitGroup)
	s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return s
}

func (p *Plugin) Execute() (err error) {

		if p.Config.SearchView == true {
			
			return err

		} else if p.Config.ListView == true {
			p.ListPlugins()
			return err
		}

	return err
}

func (p *Plugin) ListPlugins() (err error) {
	var trans = dao.NewTranslator(p.Config)
	var cli = ui.NewCommandLineInterface(p.Config)

	trans.Info("Executing ListPlugins() [for EZ]")
	plugins, err := trans.GetAllPlugins()
	if err != nil {
		return err
	}
	
	cli.DrawPlugins(plugins)

	return err
}
