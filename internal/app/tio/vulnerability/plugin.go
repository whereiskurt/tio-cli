package vulnerability

// current := &r.ScanHistoryDetails[0]

// keys := trans.SortScanPluginKeys(current)

// cli.Println(fmp.Sprintf(ui.GREEN+"Vulnerabilities for '%v' ScanId: %v, HistoryID: %s"+ui.RESET, currenp.Scan.Name, currenp.Scan.ScanId, currenp.HistoryId))
// cli.DrawScanVulnTable(*current, keys[:50])
// cli.Println("")


import (
	// "errors"
	// "fmt"
	"strconv"
	"sync"

	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Plugin struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewPlugin(config *tio.VulnerabilityConfig) *Plugin {
	s := new(Plugin)
	s.Config = config

	s.Workers = new(sync.WaitGroup)
	s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return s
}

func (p *Plugin) Execute() (err error) {

	if p.Config.SearchView == true {
		return err

	} else if p.Config.ListView == true {
		p.ListPlugins()
		return err
	}

	return err
}

func (p *Plugin) ListPlugins() (err error) {
	var trans = dao.NewTranslator(p.Config)
	var cli = ui.NewCommandLineInterface(p.Config)
	var list []dao.PluginDetailSummary

	trans.Info("Executing ListPlugins() [for EZ]")

	if err != nil {
		return err
	}

	if p.Config.AllView == true {
		list, err = trans.GetPluginList()
		if err != nil {
			return err
		}
	} else {
		ch := make(chan dao.ScanHistory, 2)
		go trans.GoGetScanHistoryDetails(ch, 3)

		for r := range ch {
			if len(r.ScanHistoryDetails) < 1 {
				continue
			}
			
			scanPlugins := r.ScanHistoryDetails[0].HostPlugin

			if len(scanPlugins) < 1 {
				continue
			}

			for _,value := range scanPlugins {
				list = append(list, value)
			}
		}
	}

	if p.Config.DetailView == true {
		//For the list, grab the details.
		var details []dao.PluginDetailSummary
		for _, plugin := range list {
			rec, err := trans.GetPluginDetail(plugin)
			if err != nil {
				return err
			}
			details = append(details,rec)
		}

		//Draw detailed plugin output 
		cli.DrawPluginDetail(details)

	} else if p.Config.ListView == true {

		//Draw just the list (short)
		cli.DrawPluginList(list)
	}
	
	return err
}
