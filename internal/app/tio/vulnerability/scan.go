package vulnerability

import (
	"fmt"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
  "strconv"
	"sync"
	"time"
)

type Scan struct {
	Config *tio.VulnerabilityConfig
  Workers *sync.WaitGroup
  ConcurrentWorkers int
	Debug func(string)
	Info  func(string)
	Warn  func(string)
	Error func(string)

	Debugf func(string, ...interface{})
	Infof  func(string, ...interface{})
	Warnf  func(string, ...interface{})
	Errorf func(string, ...interface{})
}

func NewScan(config *tio.VulnerabilityConfig) *Scan {
	s := new(Scan)
	s.Config = config
  s.Workers = new(sync.WaitGroup)
  s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	//Convenience functions
	s.Debug = config.Base.Logger.Debug
	s.Debugf = config.Base.Logger.Debugf
	s.Info = config.Base.Logger.Info
	s.Infof = config.Base.Logger.Infof
	s.Warn = config.Base.Logger.Warn
	s.Warnf = config.Base.Logger.Warnf
	s.Error = config.Base.Logger.Error
	s.Errorf = config.Base.Logger.Errorf
	return s
}

func (s *Scan) Execute() error {
	s.Info("Executing vulnerability.scan.Execute()")

  var previousOffset, _ = strconv.Atoi(s.Config.Previous)
  var depth =s.Config.Depth

	trans := dao.NewTranslator(s.Config)
  var stats = s.Config.Base.GetStatistics()

  scans, err := trans.GetScans()
  if err != nil {
    s.Errorf("Failed to GetScans(): %s", err)
    return err
  }

  var chanScans = make(chan dao.Scan, 1)

	go func() {
    defer close(chanScans)
    for _, scan := range scans {
      chanScans <- scan
    }
  }()

  for i := 0; i < s.ConcurrentWorkers; i++ {
    s.Workers.Add(1)
    go func() {
      for scan := range chanScans {
        s.Infof("Getting scan detail for scan id:%v at depth %s", scan.ScanId, depth)

        var reqStartTime = time.Now() //Start the clock!
        record, _ := trans.GetScanDetail(scan.ScanId, previousOffset)
        var reqEndTime = time.Now() //Stop the clock!
        var reqDuration = fmt.Sprintf("%v", reqEndTime.Sub(reqStartTime))
        s.Infof("Found scan id %+v took %v", scan.ScanId, reqDuration)

        if record != nil {
        }  
      }
      s.Workers.Done()  
    }()

  }

  s.Workers.Wait()  
	s.Infof("Stats: tenable.portal:%+v", stats["tenable.portal"])
	s.Infof("Stats: tio.cache:%+v", stats["tio.cache"])
	s.Infof("Stats: dao.translator:%+v", stats["dao.translator"])

	return nil
}
