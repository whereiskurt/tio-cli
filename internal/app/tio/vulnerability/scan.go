package vulnerability

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Scan struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewScan(config *tio.VulnerabilityConfig) *Scan {
	s := new(Scan)
	s.Config = config

	s.Workers = new(sync.WaitGroup)
	s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return s
}

func (s *Scan) Execute() error {
	trans := dao.NewTranslator(s.Config)
	cli := ui.NewCommandLineInterface(s.Config.Base)
	ch := make(chan dao.ScanHistory, 2)

	go trans.GoGetScanHistoryDetails(ch, 3)

	var recs []dao.ScanHistory
	for r := range ch {
		current := &r.ScanHistoryDetails[0]

		fmt.Println(fmt.Sprintf(ui.GREEN+"Scan Overview: %v ScanId: %v, HistoryID: %s"+ui.RESET, current.Scan.Name, current.Scan.ScanId, current.HistoryId))

		cli.DrawShortTable([]dao.ScanHistory{r})
		cli.DrawRunHistory(r)
		fmt.Println()

		if len(r.ScanHistoryDetails) == 0 {
			continue
		}

		keys := trans.SortScanPluginKeys(current)

		fmt.Println(fmt.Sprintf(ui.GREEN+"Vulnerabilities for '%v' ScanId: %v, HistoryID: %s"+ui.RESET, current.Scan.Name, current.Scan.ScanId, current.HistoryId))
		cli.DrawScanVulnTable(*current, keys[:10])

		fmt.Println()

		recs = append(recs, r)
	}
	// for r := range ch {
	// 	recs = append(recs, r)
	// 	fmt.Println(ui.GREEN + "Scan Overview:" + ui.RESET)
	// 	cli.DrawShortTable([]dao.ScanHistory{r})
	// 	fmt.Println()

	// 	fmt.Println(ui.GREEN + "Run Schedule:" + ui.RESET)
	// 	cli.DrawRunSchedule(r)
	// 	fmt.Println()

	// 	if len(r.ScanHistoryDetails) > 0 {
	// 		fmt.Println(ui.GREEN + "Vulnerabilities:" + ui.RESET)
	// 		cli.DrawScanVulnTable(r.ScanHistoryDetails[0])
	// 		fmt.Println()
	// 	}

	// 	fmt.Println(ui.GREEN + "Run History with Plugin Severity:" + ui.RESET)
	// 	cli.DrawRunHistory(r)
	// 	fmt.Println()
	// }
	// fmt.Println(ui.GREEN + "Scan Overview:" + ui.RESET)
	// cli.DrawShortTable(recs)
	// fmt.Println()

	// fmt.Println(fmt.Sprintf(ui.GREEN+"Summary of %d Scans"+ui.RESET, len(recs)))
	// cli.DrawDashboard(recs)

	//trans.Debugf("Stats: tenable.portal:%+v", trans.PortalCache.Portal.Stats.GetCounts())
	//trans.Debugf("Stats: tio.cache:%+v", trans.PortalCache.Stats.GetCounts())
	//trans.Infof("Stats: dao.translator:%+v", trans.Stats.GetCounts())

	//cli.DrawShortTable(recs)
	//cli.DrawDashboard(recs)

	return nil
}
