package vulnerability

import (
	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"strconv"
	"sync"
)

type Scan struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int

	Debug             func(string)
	Info              func(string)
	Warn              func(string)
	Error             func(string)

	Debugf func(string, ...interface{})
	Infof  func(string, ...interface{})
	Warnf  func(string, ...interface{})
	Errorf func(string, ...interface{})
}

func NewScan(config *tio.VulnerabilityConfig) *Scan {
	s := new(Scan)
	s.Config = config
	s.Workers = new(sync.WaitGroup)
	s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	//Convenience functions
	s.Debug = config.Base.Logger.Debug
	s.Debugf = config.Base.Logger.Debugf
	s.Info = config.Base.Logger.Info
	s.Infof = config.Base.Logger.Infof
	s.Warn = config.Base.Logger.Warn
	s.Warnf = config.Base.Logger.Warnf
	s.Error = config.Base.Logger.Error
	s.Errorf = config.Base.Logger.Errorf
	return s
}

func (s *Scan) Execute() error {
	s.Info("Executing vulnerability.scan.Execute()")

	trans := dao.NewTranslator(s.Config)

  var chanScanDetails = make(chan dao.ScanDetailRecord, 2)

  go func() {
    trans.Debugf("Reading for scan details ...")
    for scan := range chanScanDetails {
      s.Infof("Going to get host details for scan id:%s", scan.ScanId)
    }

    s.Debugf("Done reading for scan details ...")
  }()

  trans.GoGetScanDetails(chanScanDetails, 3)
   
	s.Infof("Stats: tenable.portal:%+v", trans.PortalCache.Portal.Stats.GetCounts())
	s.Infof("Stats: tio.cache:%+v", trans.PortalCache.Stats.GetCounts())
	s.Infof("Stats: dao.translator:%+v", trans.Stats.GetCounts())

	return nil
}
