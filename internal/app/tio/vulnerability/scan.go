package vulnerability

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Scan struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewScan(config *tio.VulnerabilityConfig) *Scan {
	s := new(Scan)
	s.Config = config

	s.Workers = new(sync.WaitGroup)
	s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return s
}

func (s *Scan) Execute() error {
	trans := dao.NewTranslator(s.Config)
	trans.Info("Executing tio.vulnerability.scan.Execute()")

	cli := ui.NewCommandLineInterface(s.Config.Base)
	ch := make(chan dao.ScanHistory, 2)

	go trans.GoGetScanHistoryDetails(ch, 3)

	var recs []dao.ScanHistory
	for r := range ch {
		if len(r.ScanHistoryDetails) == 0 {
			continue
		}

		current := &r.ScanHistoryDetails[0]
		cli.Println(current.CSV())
		cli.Println(current.CSVHeader())

		cli.Println(fmt.Sprintf(ui.GREEN+"Scan Overview: %v ScanId: %v, HistoryID: %s"+ui.RESET, current.Scan.Name, current.Scan.ScanId, current.HistoryId))
		cli.DrawShortTable([]dao.ScanHistory{r})
		cli.DrawRunHistory(r)
		cli.Println("")
		recs = append(recs, r)
	}

	trans.Infof("Stats: tenable.portal:%#v", trans.PortalCache.Portal.Stats.GetCounts())
	trans.Infof("Stats: tio.cache:%#v", trans.PortalCache.Stats.GetCounts())
	trans.Infof("Stats: dao.translator:%#v", trans.Stats.GetCounts())

	return nil
}
