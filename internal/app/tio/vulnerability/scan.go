package vulnerability

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Scan struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewScan(config *tio.VulnerabilityConfig) *Scan {
	s := new(Scan)
	s.Config = config

	s.Workers = new(sync.WaitGroup)
	s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return s
}

func (scanCmd *Scan) Execute() error {
	var trans = dao.NewTranslator(scanCmd.Config)
	var cli = ui.NewCommandLineInterface(scanCmd.Config)

	shouldPrintCSV := scanCmd.Config.Base.OutputCSVMode
	shouldPrintJSON := scanCmd.Config.Base.OutputJSONMode

	trans.Info("Executing tio.vulnerability.scan.Execute()")

	ch := make(chan dao.ScanHistory, 2)
	go trans.GoGetScanHistoryDetails(ch, 3)

	var recs []dao.ScanHistory
	for r := range ch {
		if len(r.ScanHistoryDetails) < 1 {
			continue
		}

		recs = append(recs, r)

		if shouldPrintJSON {
			continue
		}
		if shouldPrintCSV {
			continue
		}

		if !(shouldPrintCSV || shouldPrintJSON) {
			current := &r.ScanHistoryDetails[0]
			cli.Println(fmt.Sprintf(ui.GREEN+"Scan Overview: %v ScanId: %v, HistoryID: %s"+ui.RESET, current.Scan.Name, current.Scan.ScanId, current.HistoryId))
			cli.DrawShortTable([]dao.ScanHistory{r})
			cli.DrawRunHistory(r)
			cli.Println("")

			keys := trans.SortScanPluginKeys(current)

			cli.Println(fmt.Sprintf(ui.GREEN+"Vulnerabilities for '%v' ScanId: %v, HistoryID: %s"+ui.RESET, current.Scan.Name, current.Scan.ScanId, current.HistoryId))
			cli.DrawScanVulnTable(*current, keys)

		}

	}

	if !(shouldPrintCSV || shouldPrintJSON) {
		cli.DrawShortTable(recs)
	}

	if shouldPrintCSV == true {
		for _, r := range recs {
			//Output a header row if there's at
			if len(r.ScanHistoryDetails) > 0 {
				cli.Println(r.ScanHistoryDetails[0].CSVHeader())
			}
			for _, h := range r.ScanHistoryDetails {
				cli.Println(h.CSV())
			}
		}
	}

	trans.Infof("Stats: tenable.portal:%#v", trans.PortalCache.Portal.Stats.GetCounts())
	trans.Infof("Stats: tio.cache:%#v", trans.PortalCache.Stats.GetCounts())
	trans.Infof("Stats: dao.translator:%#v", trans.Stats.GetCounts())

	return nil
}
