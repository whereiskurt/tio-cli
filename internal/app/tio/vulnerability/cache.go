package vulnerability

import (
	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
  "github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
	"strconv"
	"sync"
)

type Cache struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
	Anonymize		bool
}

func NewCache(config *tio.VulnerabilityConfig, shouldAnon bool) (h *Cache) {
	h = new(Cache)
	h.Config = config

	h.Workers = new(sync.WaitGroup)
	h.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)
	h.Anonymize = shouldAnon

	return h
}

func (h *Cache) Execute() error {
	trans := dao.NewTranslator(h.Config)
	trans.Anonymizer = dao.NewAnonymizer(h.Config)

  cli := ui.NewCommandLineInterface(h.Config.Base)

  scans, _ := trans.GetScans() 
  for _, s := range scans {
    scanHistory, err := trans.GetScanDetail(s.ScanId, 0) //Get the 'current scans' 
    if err != nil {
      trans.Errorf("Cannot get scan history for scanid: %s", s.ScanId)
      continue
    }
	 	cli.DrawShortTable([]dao.ScanHistory{scanHistory})

    for _, shd := range scanHistory.ScanHistoryDetails {
      for _, hsd := range shd.Host {
        trans.GetHostDetail(s, hsd, shd )
      }

    }

  }

  // ch := make(chan dao.ScanHistory, 2)

  // go trans.GoGetHostDetails(ch, 3)

  // for rec := range ch {
  //   if len(rec.ScanHistoryDetails) > 0 {
  //     cli.DrawHosts(rec.ScanHistoryDetails[0])
  //     cli.DrawScanVulnTable(rec.ScanHistoryDetails[0])
  //   }
  // }

	return nil
}
