package vulnerability

import (
	"strconv"
	"sync"

	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/api/tenable"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Cache struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewCache(config *tio.VulnerabilityConfig) (h *Cache) {
	h = new(Cache)
	h.Config = config

	h.Workers = new(sync.WaitGroup)
	h.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return h
}

func (h *Cache) Execute() error {
	trans := dao.NewTranslator(h.Config)

	if h.Config.ShouldAnon == true {
		trans.Anonymizer = tenable.NewAnonymizer(h.Config)
	}

	cli := ui.NewCommandLineInterface(h.Config.Base)

	ch := make(chan dao.ScanHistory, 2)

	go trans.GoGetHostDetails(ch, 3)

	for rec := range ch {
		current := &rec.ScanHistoryDetails[0]
		keys := trans.SortScanHostKeys(current)
		if len(rec.ScanHistoryDetails) > 0 {
			cli.DrawHosts(rec.ScanHistoryDetails[0], keys)
		}
	}

	return nil
}
