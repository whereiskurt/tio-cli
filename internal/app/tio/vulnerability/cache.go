package vulnerability

import (
	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
  "github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/api/tenable"
  	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
	"strconv"
	"sync"
)

type Cache struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
	Anonymize		bool
}

func NewCache(config *tio.VulnerabilityConfig, shouldAnon bool) (h *Cache) {
	h = new(Cache)
	h.Config = config

	h.Workers = new(sync.WaitGroup)
	h.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)
	h.Anonymize = shouldAnon

	return h
}

func (h *Cache) Execute() error {
	trans := dao.NewTranslator(h.Config)

  if h.Anonymize == true {
	  trans.Anonymizer = tenable.NewAnonymizer(h.Config)
  }

  cli := ui.NewCommandLineInterface(h.Config.Base)

  ch := make(chan dao.ScanHistory, 2)

  go trans.GoGetHostDetails(ch, 3)

  for rec := range ch {
    current := &rec.ScanHistoryDetails[0]

    keys := trans.SortScanHostKeys(current)
    if len(rec.ScanHistoryDetails) > 0 {
      cli.DrawHosts(rec.ScanHistoryDetails[0], keys)
      //cli.DrawScanVulnTable(rec.ScanHistoryDetails[0])
    }
  }

	return nil
}
