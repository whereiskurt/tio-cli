package vulnerability

import (
	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
  "github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
	"strconv"
	"sync"
)

type Cache struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
	Anonymize		bool
}

func NewCache(config *tio.VulnerabilityConfig, shouldAnon bool) (h *Cache) {
	h = new(Cache)
	h.Config = config

	h.Workers = new(sync.WaitGroup)
	h.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)
	h.Anonymize = shouldAnon

	return h
}

func (h *Cache) Execute() error {
	trans := dao.NewTranslator(h.Config)
	trans.Anonymizer = dao.NewAnonymizer(h.Config)

  cli := ui.NewCommandLineInterface(h.Config.Base)

  scans, _ := trans.GetScans()
  trans.Warnf("Scans length is: %d", len(scans))
  for _, s := range scans {
    scanHistory, err := trans.GetScanDetail(s.ScanId, 0) //Get the 'current scans' 
    if err != nil {
      trans.Errorf("Cannot get scan history for scanid: %s", s.ScanId)
      continue
    }

	 	cli.DrawShortTable([]dao.ScanHistory{scanHistory})
  }

  //ch := make(chan dao.ScanHistory, 2)
  //go trans.GoGetScanDetails(ch, 3)

  // var recs []dao.ScanHistory
  // for _ = range ch {
  //  recs = append(recs, r)
  //  fmt.Println(ui.GREEN + "Scan Overview:" + ui.RESET)
	// 	cli.DrawShortTable([]dao.ScanHistory{r})
	// 	//fmt.Println()
	//}

	trans.Debugf("Stats: tenable.portal:%+v", trans.PortalCache.Portal.Stats.GetCounts())
	trans.Debugf("Stats: tio.cache:%+v", trans.PortalCache.Stats.GetCounts())
	trans.Infof("Stats: dao.translator:%+v", trans.Stats.GetCounts())

	return nil
}
