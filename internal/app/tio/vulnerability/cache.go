package vulnerability

import (
  "fmt"
  "os"
  "strings"
  "strconv"
  "sync"
	"time"
  "github.com/briandowns/spinner"
  "github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/api/tenable"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/cache"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Cache struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewCache(config *tio.VulnerabilityConfig) (h *Cache) {
	h = new(Cache)
	h.Config = config

	h.Workers = new(sync.WaitGroup)
	h.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return h
}

func (h *Cache) Execute() error {
  syncMode := h.Config.SyncMode
  shouldAnon := h.Config.ShouldAnon
  depth, _ := strconv.Atoi(h.Config.Depth)

  trans := dao.NewTranslator(h.Config)
  if shouldAnon == true {
    trans.Infof("ANONYMIZER: Attaching Anonymizer.")
    trans.Anonymizer = tenable.NewAnonymizer(h.Config)
  }

  cli := ui.NewCommandLineInterface(h.Config.Base)
  
  h.PrintCacheBanner(trans, cli)

  scans, _ := trans.GetScans()
  scanCount := len(scans)

  if syncMode == true {
    //Remove ScanList and ScanDetails for scans
    portal := cache.NewPortalCache(h.Config.Base)
    filename, _ := portal.PortalCacheFilename("/scans")

    cli.Println(fmt.Sprintf("  -> DELETING: INDEX '%s' ", filename))
    os.Remove(filename)
    for _, scan := range scans {
      scanId := scan.ScanId 
      filename, _ := portal.PortalCacheFilename("/scans/" + scanId)
      if filename == "" { continue }

      cli.Println(fmt.Sprintf("  -> DELETING: INDEX '%s' (id:%v) ...", filename, scanId ))
      os.Remove(filename)
    }
    //TODO: Clear out folders/files based on these params too!
    // for _,historyId := range strings.Split(h.Config.PluginId, ",") { }
    // for _,pluginID := range strings.Split(h.Config.PluginId, ",") { }
  }

  ch := make(chan dao.ScanHistory, h.ConcurrentWorkers)
  go trans.GoGetHostDetails(ch, h.ConcurrentWorkers)

  s := spinner.New(spinner.CharSets[9], 200*time.Millisecond)  
  s.Writer = h.Config.Base.Output

  h.PrintCacheExecutionPlan(trans, cli)

  i := 0
  s.Prefix = fmt.Sprintf("  -> Fetching hosts for '%v' scans at history depth '%v'", scanCount, depth) 
  s.Start()
  for rec := range ch { 
    i++

    var hostCount int
    var counts []string
    for _,sd := range rec.ScanHistoryDetails {
      c, _ := strconv.Atoi(sd.HostCount)
      hostCount = hostCount + c
      counts = append(counts, sd.HostCount)
    }
    s.FinalMSG = fmt.Sprintf("  %v) '%v' (id:%v) cached '%v' hosts locally [%v].\n", i, rec.Scan.Name, rec.Scan.ScanId, hostCount, strings.Join(counts, "+"))
    s.Stop()
    s.Prefix = fmt.Sprintf("  -> Fetching hosts for '%v' more scans at history depth '%v'", scanCount - i, depth) 
    s.Restart()
  }
  s.FinalMSG = fmt.Sprintf("\nDone!\n\n")
  s.Stop()

  trans.Debugf(fmt.Sprintf("Stats: tenable.portal:%#v", trans.PortalCache.Portal.Stats.GetCounts()))
  trans.Debugf(fmt.Sprintf("Stats: tio.cache:%#v", trans.PortalCache.Stats.GetCounts()))
  trans.Debugf(fmt.Sprintf("Stats: dao.translator:%#v", trans.Stats.GetCounts()))

  h.PrintCacheFooter(trans, cli)

  return nil
}

func (h *Cache) PrintCacheBanner(trans *dao.Translator, cli *ui.CommandLineInterface)  {
  dts := h.Config.Base.ExecutionDTS
                   
  cli.Println(fmt.Sprintf("\n'cache' invoked at: %v", dts))                                    

  return
}

func (h *Cache) PrintCacheExecutionPlan(trans *dao.Translator, cli *ui.CommandLineInterface)  {
  scans, _ := trans.GetScans() 
  scanCount := len(scans)
  depth, _ := strconv.Atoi(h.Config.Depth)
  totScans := depth * scanCount
  
  cli.Println(fmt.Sprintf("%v", `
Will attempt to locally cache '` + fmt.Sprintf("%v",scanCount) + `' scans from Tenable.IO 
with a history depth of '` + fmt.Sprintf("%v", depth) + `' (` + fmt.Sprintf("%v", totScans) + ` total scan lookups) ` + "\n"))

  return
} 

func (h *Cache) PrintCacheFooter(trans *dao.Translator, cli *ui.CommandLineInterface)  {
  stats := trans.Stats.GetCounts()
  cacheStats :=  trans.PortalCache.Stats.GetCounts()
  portalStats :=  trans.PortalCache.Portal.Stats.GetCounts()

  scans, _ := trans.GetScans()

  scanCount := len(scans)
  depth, _ := strconv.Atoi(h.Config.Depth)
  totScans := depth * scanCount
  //calls := stats["tio.dao.GetScan.CallCount"]

  cli.Println(
"--------------------------------------------\n"+
"Statistics\n"+
"--------------------------------------------\n"+
"Scans SUCCESS: " + fmt.Sprintf("'%v'", totScans ) + "\n" + 
"\n" +
"Hosts SUCCESS: " + fmt.Sprintf("'%v' hosts cached", stats["tio.dao.GetHostDetail.CallCount"]) +  "\n" +
"Hosts  FAILED: " + fmt.Sprintf("'%v' hosts failed to cache", stats["tio.dao.GetHostDetail.ErrorBadData"]) +  "\n" +
"\n" +
fmt.Sprintf("API Tenable.IO GET: %v \n",portalStats["tio.api.GET.Success"]) +
fmt.Sprintf("API Tenable.IO POST: 0 \n") +
fmt.Sprintf("API Tenable.IO DELETE:0 \n") +
"\n" +
"Total DISK CACHE: " + fmt.Sprintf("%v", cacheStats["tio.cache.HIT"]) + " HITS / " + fmt.Sprintf("%v", cacheStats["tio.cache.MISS"]) + " MISSES\n" )

  cli.Println("--------------------------------------------\n")

// Total API GET calls made to Tenable.IO: trans.PortalCache.Portal.Stats['tio.api.GET.Success']


// `)

}

////////////////////////////////////
//  _   _                       
// | |_(_) ___                  
// | __| |/ _ \                 
// | |_| | (_) |                
//  \__|_|\___/                 
//  ___  ___ __ _ _ __          
// / __|/ __/ _` | '_ \         
// \__ \ (_| (_| | | | |        
// |___/\___\__,_|_| |_|        
//                 _            
//   ___ __ _  ___| |__   ___   
//  / __/ _` |/ __| '_ \ / _ \  
// | (_| (_| | (__| | | |  __/  
//  \___\__,_|\___|_| |_|\___|  
//  _               _           
// | |__   ___  ___| |_         
// | '_ \ / _ \/ __| __|        
// | | | | (_) \__ \ |_         
// |_| |_|\___/|___/\__|        
//        _             _       
//  _ __ | |_   _  __ _(_)_ __  
// | '_ \| | | | |/ _` | | '_ \ 
// | |_) | | |_| | (_| | | | | |
// | .__/|_|\__,_|\__, |_|_| |_|
// |_|            |___/         
//