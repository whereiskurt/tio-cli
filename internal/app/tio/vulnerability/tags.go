package vulnerability

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Tags struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewTags(config *tio.VulnerabilityConfig) *Tags {
	s := new(Tags)
	s.Config = config

	s.Workers = new(sync.WaitGroup)
	s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return s
}

func (tagsCmd *Tags) Execute() error {
	var trans = dao.NewTranslator(tagsCmd.Config)
	var cli = ui.NewCommandLineInterface(tagsCmd.Config.Base)

	trans.Info("Executing tio.vulnerability.tags.Execute()")

	tagCategory := tagsCmd.Config.TagCategory
	tagValue := tagsCmd.Config.TagValue


	if tagsCmd.Config.Create == true {
		//TODO: Create code for new Tag
		return nil
	}

	if	tagsCmd.Config.SearchView == true {
		return nil
	} else if	tagsCmd.Config.ListView == true {
		return nil
	}

	//Tag a specific AssetUUD if we have it.
	if tagsCmd.Config.AssetUUID != "" {
		assetUUID := tagsCmd.Config.AssetUUID
		if tagsCmd.Config.Tag == true {
			tagsCmd.Tag(assetUUID, tagCategory, tagValue)

		} else if	tagsCmd.Config.Untag == true {
			trans.UntagByAssetUUID(assetUUID, tagCategory, tagValue)
		
		}
		return nil
	}

	//Use the scan history and scanid,hostid,pluginid,etc.
	ch := make(chan dao.ScanHistory, 2)

	go trans.GoGetHostDetails(ch, 6)

	for rec := range ch {
		if len(rec.ScanHistoryDetails) == 0 {
			continue
		}
		scan := rec.ScanHistoryDetails[0]
		hosts := scan.Host
		for _, h := range hosts {
			assetUUID := h.Asset.UUID

			if tagsCmd.Config.Tag == true {
				tagsCmd.Tag(assetUUID, tagCategory, tagValue)

			} else if	tagsCmd.Config.Untag == true {
				trans.UntagByAssetUUID(assetUUID, tagCategory, tagValue)
				cli.Println(fmt.Sprintf("Untagging: Host: %s \t\tUUID:%s \nTags:%+v\nHosts:%+v", h.HostId, assetUUID, h.Asset.Tags, h))
			}

		}

	}

	return nil
}

func (tagsCmd *Tags) Tag(assetUUID string, tagCategory string, tagValue string) {
	var trans = dao.NewTranslator(tagsCmd.Config)
	var cli = ui.NewCommandLineInterface(tagsCmd.Config.Base)

	trans.TagByAssetUUID(assetUUID, tagCategory, tagValue)
	cli.Println(fmt.Sprintf("Tagging AssetUUID: %s with Category:%s Value:%s\n", assetUUID, tagCategory, tagValue))

	return
}
func (tagsCmd *Tags) Untag(assetUUID string, tagCategory string, tagValue string) {
	var trans = dao.NewTranslator(tagsCmd.Config)
	var cli = ui.NewCommandLineInterface(tagsCmd.Config.Base)

	trans.UntagByAssetUUID(assetUUID, tagCategory, tagValue)
	cli.Println(fmt.Sprintf("Untagging AssetUUID: %s with Category:%s Value:%s\n", assetUUID, tagCategory, tagValue))

	return
}

//  tio-cli asset --list --scanId=67
//
//  tio-cli tags --list
//  tio-cli tags --search --category "addenda-agents" --value "testagkph"
//
//  tio-cli tags --tag --category "addenda-agents" --value "testagkph" --scanId=67
//  tio-cli tags --tag --category "addenda-agents" --value "testagkph" --assetUUID=ae33der-e39c91a-cbf313
//  tio-cli tags --untag --category "addenda-agents" --value "testagkph" --scanId=67
//
//  tio-cli tags --create --category "addenda-agents" --value "testagkph"
//  tio-cli tags --delete --category "addenda-agents" --value "testagkph"