package vulnerability

import (
	"errors"
	"fmt"
	"strconv"
	"sync"

	"github.com/whereiskurt/tio-cli/internal/pkg/tio"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/dao"
	"github.com/whereiskurt/tio-cli/internal/pkg/tio/ui"
)

type Tags struct {
	Config            *tio.VulnerabilityConfig
	Workers           *sync.WaitGroup
	ConcurrentWorkers int
}

func NewTags(config *tio.VulnerabilityConfig) *Tags {
	s := new(Tags)
	s.Config = config

	s.Workers = new(sync.WaitGroup)
	s.ConcurrentWorkers, _ = strconv.Atoi(config.Base.ConcurrentWorkers)

	return s
}

func (tagsCmd *Tags) Execute() (err error) {

	tagCategory := tagsCmd.Config.TagCategory
	tagValue := tagsCmd.Config.TagValue

	//CREATE or DELETE??
	if tagsCmd.Config.Create == true {
		err = tagsCmd.CreateTag(tagCategory, tagValue)
		return err
	} else if tagsCmd.Config.Delete == true {
		err = tagsCmd.DeleteTag(tagCategory, tagValue)
		return err
	}

	//LIST or SEARCH ??
	if !(tagsCmd.Config.Tag || tagsCmd.Config.Untag) {
		if tagsCmd.Config.SearchView == true {
			return nil
		} else if tagsCmd.Config.ListView == true {
			var trans = dao.NewTranslator(tagsCmd.Config)
			values, err := trans.GetTagValues()
			for _,v := range values.Values {
				if v.CategoryName == tagCategory && v.Value == tagValue {
					fmt.Println(fmt.Sprintf("%+v", v))
					break
				}
			}
			return err
		}
	}

	//TAG or UNGAG an asset
	if tagsCmd.Config.AssetUUID != "" {
		//TODO: Split and loop on a command-separated assetUUID list
		assetUUID := tagsCmd.Config.AssetUUID
		if tagsCmd.Config.Tag == true {
			err = tagsCmd.Tag(assetUUID, tagCategory, tagValue)

		} else if tagsCmd.Config.Untag == true {
			err = tagsCmd.Untag(assetUUID, tagCategory, tagValue)

		}
		return err
	}

	//TAG or UNTAG manny based on command parameters (--scanId, --hostId, etc.)
	err = tagsCmd.LoopOnHostDetails(tagCategory, tagValue)

	return err
}

func (tagsCmd *Tags) LoopOnHostDetails(tagCategory string, tagValue string) (err error) {

	var trans = dao.NewTranslator(tagsCmd.Config)
	trans.Info("Executing tio.vulnerability.tags.Execute()")

	//Use the scan history and scanid,hostid,pluginid,etc.
	ch := make(chan dao.ScanHistory, 2)

	go trans.GoGetHostDetails(ch, 6)

	for rec := range ch {
		if len(rec.ScanHistoryDetails) == 0 {
			continue
		}
		scan := rec.ScanHistoryDetails[0]
		hosts := scan.Host
		for _, h := range hosts {
			assetUUID := h.Asset.UUID

			if tagsCmd.Config.Tag == true {
				err = tagsCmd.Tag(assetUUID, tagCategory, tagValue)

			} else if tagsCmd.Config.Untag == true {
				err = tagsCmd.Untag(assetUUID, tagCategory, tagValue)

			}

			if err != nil {
				trans.Errorf("ERROR: %s", err)

				break
			}

		}
	}

	return err
}

func (tagsCmd *Tags) CreateTag(tagCategory string, tagValue string) (err error) {

	var trans = dao.NewTranslator(tagsCmd.Config)
	var cli = ui.NewCommandLineInterface(tagsCmd.Config.Base)

	categories, err := trans.GetTagCategories()

	if err != nil {
		trans.Errorf("Error: %s", err)
		return err
	}

	if tagCategory == "" {
		err = errors.New("ERROR: Must provide a category name.")
		cli.Println(fmt.Sprintf("%s", err))
		trans.Errorf("%s", err)
		return err
	}

	var categoryUUID string = ""
	for _, v := range categories.Categories {
		if tagCategory == v.Name {
			categoryUUID = v.UUID
			break
		}
	}

	if categoryUUID == "" {
		trans.Infof("Creating category '%s' ... ", tagCategory)
		categoryUUID, err = trans.CreateTagCategory(tagCategory)
		if err != nil {
			cli.Println(fmt.Sprintf("%s", err))
			trans.Errorf("ERROR: %s", err)
			return err
		}
	}

	if tagValue != "" {
		log := fmt.Sprintf("Creating category:value '%s' for category '%s' [%s]", tagValue, tagCategory, categoryUUID)
		cli.Println(fmt.Sprintf("%s", log))

		trans.Infof(log)
		err = trans.CreateTagValue(categoryUUID, tagCategory, tagValue)
		if err != nil {
			return err
		}
		cli.Println(fmt.Sprintf("Success!"))
	}

	return err
}
func (tagsCmd *Tags) DeleteTag(tagCategory string, tagValue string) (err error) {
	var trans = dao.NewTranslator(tagsCmd.Config)

	if tagCategory == "" || tagValue == "" {
		err := errors.New("Error: Must specify a CATEGORY and VALUE - ie. a TAG, both.")
		trans.Errorf("%s", err)
		return err
	}

	values, err := trans.GetTagValues()

	if err != nil {
		trans.Errorf("ERROR:%s\n%s", err, values)
		return err
	}

	tagUUID := ""
	matched := false
	for _,v := range values.Values {
		if v.CategoryName == tagCategory && v.Value == tagValue {
			tagUUID = v.UUID
			matched = true
			break
		}
	}
	if !matched {
		err = errors.New(fmt.Sprintf("ERROR: Couldn't find tag matching category:%s and value:%s", tagCategory, tagValue))
		trans.Errorf("%s", err)
	}

	trans.Infof("Calling DELETE on TAG UUID:'%s'", tagCategory, tagValue, tagUUID)
	trans.DeleteTagValue(tagUUID)

	return err
}
func (tagsCmd *Tags) Tag(assetUUID string, tagCategory string, tagValue string) (err error) {
	var trans = dao.NewTranslator(tagsCmd.Config)
	var cli = ui.NewCommandLineInterface(tagsCmd.Config.Base)

	trans.Infof(fmt.Sprintf("Tagging AssetUUID: %s with Category:%s Value:%s", assetUUID, tagCategory, tagValue))

	err = trans.TagByAssetUUID(assetUUID, tagCategory, tagValue)
	if err != nil {
		cli.Println(fmt.Sprintf("ERROR: %s\n", err))
	}
	return
}
func (tagsCmd *Tags) Untag(assetUUID string, tagCategory string, tagValue string) (err error) {
	var trans = dao.NewTranslator(tagsCmd.Config)
	var cli = ui.NewCommandLineInterface(tagsCmd.Config.Base)

	trans.Infof(fmt.Sprintf("Untagging AssetUUID: %s with Category:%s Value:%s", assetUUID, tagCategory, tagValue))

	err = trans.UntagByAssetUUID(assetUUID, tagCategory, tagValue)
	if err != nil {
		cli.Println(fmt.Sprintf("ERROR: %s", err))
	} else {
		cli.Println(fmt.Sprintf("Success!"))
	}
	return err
}

//  tio-cli asset --list --scanId=67
//
//  tio-cli tags --list
//  tio-cli tags --search --category "addenda-agents" --value "testagkph"
//
//  tio-cli tags --tag --category "addenda-agents" --value "testagkph" --scanId=67
//  tio-cli tags --tag --category "addenda-agents" --value "testagkph" --assetUUID=ae33eer-e39chha-cb44233
//  tio-cli tags --untag --category "addenda-agents" --value "testagkph" --scanId=67
//  tio-cli tags --create --category "addenda-agents" --value "testagkph"

//  tio-cli tags --delete --category "addenda-agents" --value "testagkph"
